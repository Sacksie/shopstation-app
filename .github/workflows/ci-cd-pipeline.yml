name: 🚀 ShopStation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ============================================================================
  # QUALITY GATES: Comprehensive Testing & Validation
  # ============================================================================
  quality-gates:
    name: 🔍 Quality Gates & Testing
    runs-on: ubuntu-latest
    
    services:
      # Test database for integration tests
      test-db:
        image: alpine:latest
        options: >-
          --health-cmd "echo 'healthy'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js with caching
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # ========================================================================
      # BACKEND TESTING PIPELINE
      # ========================================================================
      
      # Install backend dependencies
      - name: 📦 Install Backend Dependencies
        working-directory: ./backend
        run: |
          npm ci --only=production=false
          echo "✅ Backend dependencies installed"

      # Backend: Environment Configuration Test
      - name: 🔧 Validate Backend Environment Configuration
        working-directory: ./backend
        env:
          NODE_ENV: test
          ADMIN_PASSWORD: test-admin-password-for-ci
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-validation-only
        run: |
          echo "🔍 Testing environment configuration..."
          npm run check-env
          echo "✅ Environment configuration valid"

      # Backend: Unit Tests
      - name: 🧪 Backend Unit Tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          ADMIN_PASSWORD: test-admin-password-for-ci
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-validation-only
        run: |
          echo "🧪 Running backend unit tests..."
          npm test -- --verbose --coverage
          echo "✅ Backend unit tests passed"

      # Backend: Integration Tests
      - name: 🔗 Backend Integration Tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          ADMIN_PASSWORD: test-admin-password-for-ci
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-validation-only
        run: |
          echo "🔗 Running backend integration tests..."
          # Test API endpoints end-to-end
          npm test -- --testMatch="**/tests/**/*.integration.test.js" --verbose
          echo "✅ Backend integration tests passed"

      # Backend: Security Scan
      - name: 🛡️ Backend Security Scan
        working-directory: ./backend
        run: |
          echo "🛡️ Scanning for security vulnerabilities..."
          npm audit --audit-level=moderate
          echo "✅ Security scan completed"

      # Backend: Database Tests
      - name: 🗄️ Database Operations Tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          ADMIN_PASSWORD: test-admin-password-for-ci
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-validation-only
        run: |
          echo "🗄️ Testing database operations..."
          # Test backup/restore functionality
          node -e "
            const { cloudBackup } = require('./utils/cloudBackup');
            const testBackup = async () => {
              console.log('Testing backup system...');
              const result = await cloudBackup.createFullBackup('ci-test');
              if (result.success) {
                console.log('✅ Backup system functional');
              } else {
                console.error('❌ Backup system failed');
                process.exit(1);
              }
            };
            testBackup();
          "

      # ========================================================================
      # FRONTEND TESTING PIPELINE
      # ========================================================================

      # Install frontend dependencies
      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm ci
          echo "✅ Frontend dependencies installed"

      # Frontend: Environment Configuration Test
      - name: 🔧 Validate Frontend Environment Configuration
        working-directory: ./frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_ENV: test
        run: |
          echo "🔍 Testing frontend environment configuration..."
          node -e "
            const config = require('./src/config/environments.js');
            console.log('Environment:', config.default.environment);
            console.log('API URL:', config.default.api.baseUrl);
            if (!config.default.api.baseUrl) {
              console.error('❌ Frontend environment configuration invalid');
              process.exit(1);
            }
            console.log('✅ Frontend environment configuration valid');
          "

      # Frontend: Unit Tests
      - name: 🧪 Frontend Unit Tests
        working-directory: ./frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_ENV: test
        run: |
          echo "🧪 Running frontend unit tests..."
          npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
          echo "✅ Frontend unit tests passed"

      # Frontend: Component Integration Tests
      - name: 🔗 Frontend Component Integration Tests
        working-directory: ./frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_ENV: test
        run: |
          echo "🔗 Running frontend component integration tests..."
          # Test critical user journeys
          npm test -- --testMatch="**/*.integration.test.js" --watchAll=false
          echo "✅ Frontend integration tests passed"

      # Frontend: Build Test
      - name: 🏗️ Frontend Build Test
        working-directory: ./frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_ENV: test
        run: |
          echo "🏗️ Testing frontend build process..."
          npm run build
          echo "✅ Frontend build successful"

      # ========================================================================
      # COMPREHENSIVE QUALITY VALIDATION
      # ========================================================================

      # Code Quality Check
      - name: 📊 Code Quality Analysis
        run: |
          echo "📊 Running code quality analysis..."
          
          # Check for common code quality issues
          echo "🔍 Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.js" --include="*.jsx" backend/ frontend/ || true; then
            echo "⚠️  Found TODO/FIXME comments - consider addressing before production"
          fi
          
          # Check for console.log in production code (except monitoring)
          echo "🔍 Checking for debug statements..."
          if grep -r "console\.log" --include="*.js" --include="*.jsx" frontend/src/ --exclude-dir=config || true; then
            echo "⚠️  Found console.log statements in frontend - consider removing for production"
          fi
          
          echo "✅ Code quality analysis completed"

      # Test Coverage Validation
      - name: 📈 Test Coverage Validation
        run: |
          echo "📈 Validating test coverage..."
          
          # Check backend test coverage
          echo "Backend test coverage summary:"
          if [ -f "backend/coverage/coverage-summary.json" ]; then
            node -e "
              const coverage = require('./backend/coverage/coverage-summary.json');
              const total = coverage.total;
              console.log('Lines:', total.lines.pct + '%');
              console.log('Functions:', total.functions.pct + '%');
              console.log('Branches:', total.branches.pct + '%');
              console.log('Statements:', total.statements.pct + '%');
              
              if (total.lines.pct < 70) {
                console.error('❌ Backend test coverage below 70% - ' + total.lines.pct + '%');
                process.exit(1);
              }
              console.log('✅ Backend test coverage acceptable: ' + total.lines.pct + '%');
            "
          else
            echo "⚠️  Backend coverage report not found"
          fi
          
          echo "✅ Test coverage validation completed"

  # ============================================================================
  # PERFORMANCE & LOAD TESTING
  # ============================================================================
  performance-tests:
    name: ⚡ Performance & Load Testing
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Performance testing
      - name: ⚡ Backend Performance Tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          ADMIN_PASSWORD: test-admin-password-for-ci
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-validation-only
        run: |
          echo "⚡ Running performance tests..."
          npm ci
          
          # Test API response times
          node -e "
            const express = require('express');
            const app = express();
            const config = require('./config/environments');
            
            app.use(express.json());
            app.get('/test-health', (req, res) => res.json({status: 'ok'}));
            
            const server = app.listen(3001, () => {
              console.log('Test server started');
              
              // Test response time
              const start = Date.now();
              const http = require('http');
              
              const req = http.request({
                hostname: 'localhost',
                port: 3001,
                path: '/test-health',
                method: 'GET'
              }, (res) => {
                const responseTime = Date.now() - start;
                console.log('Response time:', responseTime + 'ms');
                
                if (responseTime > 1000) {
                  console.error('❌ Response time too slow: ' + responseTime + 'ms');
                  process.exit(1);
                }
                
                console.log('✅ Performance test passed');
                server.close();
              });
              
              req.on('error', (e) => {
                console.error('Performance test error:', e);
                process.exit(1);
              });
              
              req.end();
            });
          "

  # ============================================================================
  # DEPLOYMENT TO STAGING
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging Environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📍 Branch: ${{ github.ref }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "✅ Staging deployment completed"
          
          # In a real implementation, this would:
          # - Deploy to staging Railway environment
          # - Run staging-specific health checks
          # - Notify team of successful deployment

  # ============================================================================
  # DEPLOYMENT TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Pre-deployment health check
      - name: 🏥 Pre-deployment Health Check
        run: |
          echo "🏥 Running pre-deployment health checks..."
          
          # Check current production health
          curl -f https://backend-production-2cbb.up.railway.app/api/health || {
            echo "⚠️  Current production health check failed - proceeding with caution"
          }
          
          echo "✅ Pre-deployment checks completed"

      # Production deployment happens automatically via Railway/Vercel
      # when code is pushed to main branch
      - name: 🌟 Production Deployment
        run: |
          echo "🌟 Production deployment initiated..."
          echo "📍 Branch: ${{ github.ref }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🏷️  Tag: ${{ github.ref_name }}"
          
          # Railway and Vercel will automatically deploy
          echo "🚀 Railway (backend) will auto-deploy from this commit"
          echo "🚀 Vercel (frontend) will auto-deploy from this commit"
          
          echo "⏳ Waiting 60 seconds for deployments to complete..."
          sleep 60

      # Post-deployment verification
      - name: ✅ Post-deployment Health Check
        run: |
          echo "✅ Running post-deployment health checks..."
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔍 Health check attempt $attempt/$max_attempts..."
            
            if curl -f https://backend-production-2cbb.up.railway.app/api/health; then
              echo "✅ Backend health check passed"
              
              # Verify monitoring systems
              if curl -f https://backend-production-2cbb.up.railway.app/api/system/status; then
                echo "✅ Monitoring systems operational"
                break
              else
                echo "⚠️  Monitoring systems check failed"
              fi
            else
              echo "❌ Backend health check failed on attempt $attempt"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "🚨 CRITICAL: Production deployment failed health checks!"
                echo "🔄 Consider rollback procedures"
                exit 1
              fi
              
              echo "⏳ Waiting 30 seconds before retry..."
              sleep 30
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo "🎉 Production deployment successful!"

      # Business metrics validation
      - name: 📊 Business Metrics Validation
        run: |
          echo "📊 Validating business metrics..."
          
          # Check that monitoring systems are tracking correctly
          response=$(curl -s https://backend-production-2cbb.up.railway.app/api/system/status)
          
          if echo "$response" | grep -q '"status":"HEALTHY"'; then
            echo "✅ Business monitoring systems healthy"
          else
            echo "⚠️  Business monitoring systems may need attention"
          fi
          
          # Check backup systems
          backup_response=$(curl -s https://backend-production-2cbb.up.railway.app/api/system/backups)
          
          if echo "$backup_response" | grep -q '"success":true'; then
            echo "✅ Backup systems operational"
          else
            echo "⚠️  Backup systems may need attention"
          fi
          
          echo "✅ Business metrics validation completed"

      # Deployment success notification
      - name: 🎉 Deployment Success Notification
        run: |
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "=================================="
          echo "📍 Environment: Production"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🕐 Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🔗 Backend: https://backend-production-2cbb.up.railway.app"
          echo "🔗 Frontend: https://shopstation.co.uk"
          echo "🏥 Health: https://backend-production-2cbb.up.railway.app/api/health"
          echo "📊 Status: https://backend-production-2cbb.up.railway.app/api/system/status"
          echo "=================================="